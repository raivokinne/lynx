let map = fn(arr, func) {
    let result = []
    let i = 0
    while i < arr.len() {
        result = result.push(func(arr[i]))
        i = i + 1
    }
    return result
}

let filter = fn(arr, predicate) {
    let result = []
    let i = 0
    while i < arr.len() {
        if predicate(arr[i]) {
            result = result.push(arr[i])
        }
        i = i + 1
    }
    return result
}

let reduce = fn(arr, func, initial) {
    let acc = initial
    let i = 0
    while i < arr.len() {
        acc = func(acc, arr[i])
        i = i + 1
    }
    return acc
}

let find = fn(arr, predicate) {
    let i = 0
    while i < arr.len() {
        if predicate(arr[i]) {
            return arr[i]
        }
        i = i + 1
    }
    return null
}

let findIndex = fn(arr, predicate) {
    let i = 0
    while i < arr.len() {
        if predicate(arr[i]) {
            return i
        }
        i = i + 1
    }
    return -1
}

let reverse = fn(arr) {
    let result = []
    let i = arr.len() - 1
    while i >= 0 {
        result = result.push(arr[i])
        i = i - 1
    }
    return result
}

let sort = fn(arr, compareFn) {
    let sorted = []
    let i = 0
    while i < arr.len() {
        sorted = sorted.push(arr[i])
        i = i + 1
    }
    let n = sorted.len()
    let i = 0
    while i < n - 1 {
        let j = 0
        while j < n - i - 1 {
            let shouldSwap = false
            if compareFn {
                shouldSwap = compareFn(sorted[j], sorted[j + 1]) > 0
            } else {
                shouldSwap = sorted[j] > sorted[j + 1]
            }
            if shouldSwap {
                let temp = sorted[j]
                sorted[j] = sorted[j + 1]
                sorted[j + 1] = temp
            }
            j = j + 1
        }
        i = i + 1
    }
    return sorted
}

let unique = fn(arr) {
    let result = []
    let seen = {}
    let i = 0
    while i < arr.len() {
        let item = arr[i]
        if !seen[item] {
            seen[item] = true
            result = result.push(item)
        }
        i = i + 1
    }
    return result
}

let flatten = fn(arr) {
    let result = []
    let i = 0
    while i < arr.len() {
        let item = arr[i]
        result = result.push(item)
        i = i + 1
    }
    return result
}

let sum = fn(arr) {
    let total = 0
    let i = 0
    while i < arr.len() {
        total = total + arr[i]
        i = i + 1
    }
    return total
}

let min = fn(arr) {
    if arr.len() == 0 {
        return null
    }
    let minVal = arr.first()
    let i = 1
    while i < arr.len() {
        if arr[i] < minVal {
            minVal = arr[i]
        }
        i = i + 1
    }
    return minVal
}

let max = fn(arr) {
    if arr.len() == 0 {
        return null
    }
    let maxVal = arr.first()
    let i = 1
    while i < arr.len() {
        if arr[i] > maxVal {
            maxVal = arr[i]
        }
        i = i + 1
    }
    return maxVal
}

let contains = fn(arr, item) {
    let i = 0
    while i < arr.len() {
        if arr[i] == item {
            return true
        }
        i = i + 1
    }
    return false
}
